name: CI

on: [push, pull_request]

jobs:
  tests:
    runs-on: windows-latest
    timeout-minutes: 10
    
    steps:
      # Checkout
      - name: Checkout
        uses: actions/checkout@v3

      # The whole Node.js and pnpm installation and caching
      # Based on https://github.com/pnpm/action-setup/tree/6e1964dde3397a825e79e4607ad57f3f7ca2c7cb#use-cache-to-reduce-installation-time

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - uses: pnpm/action-setup@v2.0.1
        name: Install pnpm
        id: pnpm-install
        with:
          version: 7
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Run basic Svelte checks
      - name: Svelte Check
        run: npm run check
      
      # Build Frontend
      - name: Build Frontend
        if: success() || failure() # Run even if previous failed
        run: npm run build
      
      # Setup Nuget and install IE11&Edge web drivers and BrowserStackLocal
      - name: Setup NuGet.exe
        uses: nuget/setup-nuget@v1
      - name: Install IE11 Web Driver
        run: nuget install Selenium.WebDriver.IEDriver -Version 4.5.0
      - name: Install Edge Web Driver
        run: |
          $full = (wmic.exe DATAFILE WHERE "NAME='C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe'" GET Version /value).Split("") -join ""
          $version = $full.Substring($full.indexOf("=") + 1)
          echo "Current Edge Version: $version"
          $destination = "edge-driver.zip"
          Invoke-RestMethod -Uri https://msedgedriver.azureedge.net/$version/edgedriver_win64.zip -OutFile $destination
          Expand-Archive $destination -DestinationPath "edge-driver"
      - name: Install BrowserStackLocal
        run: |
          $url = "https://www.browserstack.com/browserstack-local/BrowserStackLocal-win32.zip"
          $destination = "edge-driver.zip"
          Invoke-RestMethod -Uri $url -OutFile $destination
          Expand-Archive $destination -DestinationPath "browser-stack-local"
      
      # Run Selenium Tests
      - name: Selenium Tests on BrowserStack, IE11 and Edge
        env:
          BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
          BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
          PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}
        run: |
          $Env:PATH += ";" + $pwd + "\edge-driver" + ";" + $pwd + "\Selenium.WebDriver.IEDriver.4.5.0\driver" + ";" + $pwd + "\browser-stack-local"
          npm run preview -- --host &
          if ($null -eq $env:PERCY_TOKEN) {
            $TEST_SELENIUM_COMMAND = "npm run test-selenium"
          } else {
            $TEST_SELENIUM_COMMAND = "npx percy exec -- npm run test-selenium"
          }
          try {
            if ($null -ne $env:BROWSERSTACK_ACCESS_KEY) {
              BrowserStackLocal.exe --key $BROWSERSTACK_ACCESS_KEY &
              $Env:BROWSER = "browser-stack"
              npm run test-selenium
            }
            $Env:BROWSER = "ie"
            npm run test-selenium
            $Env:BROWSER = "edge"
            Invoke-expression $TEST_SELENIUM_COMMAND
          } catch {
            echo "Error during browser tests!"
            exit 1
          }
